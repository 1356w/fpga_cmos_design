`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    06:40:21 05/31/2017 
// Design Name: 
// Module Name:    usb_controller 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
`define USB_command {USB_SLOE,USB_SLWR,USB_SLRD}
`define EP6_Addr 2'b10
`define EP4_Addr 2'b01
module usb_controller(
								usb_clk,
								USB_FlagA,USB_FlagB,USB_FlagC,USB_FlagD,
								USB_DATA,USB_FIFO_ADR,PKTEND,USB_SLWR,USB_SLRD,USB_SLOE,
								nframe,send_out,
								parameter_data,fifo_parameter_en,
								receive_data,receive_data_en,
								image_data,fifo_image_en								
							);
			input  usb_clk ;
			input  USB_FlagA,USB_FlagB,USB_FlagC,USB_FlagD;
			inout  [15:0]USB_DATA;
			output USB_FIFO_ADR ;
			output PKTEND;
			output USB_SLWR,USB_SLRD,USB_SLOE;
			
			input  [15:0]image_data    ;
			output fifo_image_en       ;
			reg    fifo_image_en       ;
/////////////////////////////////////////////////////////////////			
			input   [15:0]parameter_data;
			output  fifo_parameter_en   ;
			reg     fifo_parameter_en   ;
/////////////////////////////////////////////////////////////////
			output [15:0]receive_data  ;
			reg    [15:0]receive_data  ;
			output receive_data_en     ;
			reg    receive_data_en     ;
			
			input  nframe    ;
			input send_out   ;
			
			reg [1:0]USB_FIFO_ADR;
			reg [15:0]USB_Data_out_buf;
			reg [15:0]USB_Data_in_buf ;
			reg PKTEND  = 1      ;
			reg USB_SLWR,USB_SLRD,USB_SLOE;
			
			reg [15:0]data_buf   ;
			reg [9:0]counter     ;
			reg flag_counter     ;
			reg direction_flag   ;
			reg USB_FlagA_EP6_EF ;
			reg USB_FlagB_EP6_PF ;
			reg USB_FlagC_EP4_EF ;
			reg USB_FlagD_EP4_FF ;
			reg fifo_parameter_en_flag;
			reg fifo_image_en_flag    ;
			reg frame_flag            ;
			reg frame_flag_buf1       ;
			reg frame_flag_falling_edge;
			
			reg [5:0]main_state    = power_up  ;
			reg [5:0]next_state    = power_up  ;
			reg [5:0]current_state = power_up  ;
			
			parameter 
				power_up              = 6'b000000 ,
				usb_EP6               = 6'b000001 ,
				usb_send_sc           = 6'b000010 ,
				usb_send_paramter     = 6'b000100 ,
				usb_send_image_data   = 6'b001000 ,
				usb_EP4  			  = 6'b010000 ,
				usb_receive_data      = 6'b100000 ;
			parameter 
				usb_write = 3'b101 ,
				usb_read  = 3'b110 ,
				usb_nop   = 3'b111 ;
//////////////////////////////////////////////////
			assign USB_DATA = direction_flag ? USB_Data_out_buf : 15'bZZZZZZZZZZZZZZZ ;
//////////////////////////////////////////////////
			always @ ( posedge usb_clk or posedge nframe )
				begin
					if ( nframe == 1 )
						begin
							frame_flag <= 1 ;
						end
					else
						if ( main_state == usb_EP6 )
							begin
								frame_flag <= 0 ;
							end
						else
							if ( main_state == usb_EP4 )
								begin
									frame_flag <= 0 ;
								end
				end
			always @ ( posedge usb_clk )
				begin
					frame_flag_buf1 <= frame_flag ;
					frame_flag_falling_edge <= (frame_flag_buf1) && (~frame_flag) ;
				end
//////////////////////////////////////////////////
			always @ ( posedge usb_clk )
				begin
					USB_FlagA_EP6_EF <= USB_FlagA;
					USB_FlagB_EP6_PF <= USB_FlagB;
					USB_FlagC_EP4_EF <= USB_FlagC;
					USB_FlagD_EP4_FF <= USB_FlagD;
					USB_Data_in_buf  <= USB_DATA ;
					
				end
			always @ ( posedge usb_clk )
				begin
					if ( frame_flag_falling_edge )
						begin
							counter <= 0 ;
						end
					else
						if ( flag_counter )
							begin
								counter <= counter + 1 ;
							end
						else
							begin
								counter <= 0 ;
							end
				end
			
			always @ ( posedge usb_clk )
						begin
							case ( main_state )
								power_up :
									begin
										receive_data_en         <= 0 ;
										fifo_parameter_en_flag  <= 0 ;
										receive_data_en         <= 0 ;      
										fifo_image_en_flag      <= 0 ;
										fifo_image_en           <= 0 ;
										if ( USB_FlagC_EP4_EF == 0 )
											begin
												main_state   <= usb_EP4             ;
												`USB_command <= usb_nop             ;
											end
										else
											begin
												`USB_command     <= usb_read        ;
											end
									end
								usb_EP4 : 
									begin
										current_state <= usb_EP6                   ;
										if ( USB_FlagC_EP4_EF != 0 )
											begin
												direction_flag <= 0                ;
												main_state     <= usb_receive_data ;
												USB_FIFO_ADR   <= `EP4_Addr        ;
											end
										else
											begin
												main_state     <= usb_EP6          ;
											end
										if ( frame_flag )
											begin
												next_state <= usb_send_sc          ;
											end
									end
								usb_EP6   :
									begin
										current_state <= usb_EP4                 ;
										if ( USB_FlagA_EP6_EF == 0 )
											begin
												main_state        <= next_state       ;
												direction_flag    <= 1                ;
												flag_counter      <= 1                ;
												USB_FIFO_ADR      <= `EP6_Addr        ;
												fifo_parameter_en <= fifo_parameter_en_flag;
												fifo_image_en     <= fifo_image_en_flag;
											end
										else
											begin
												main_state     <= usb_EP4          ;
											end
										if ( frame_flag )
											begin
												next_state <= usb_send_sc          ;
											end
									end
								usb_send_sc :
									begin
										if ( counter== 256 )
											begin
												main_state   <= current_state     ;
												next_state   <= usb_send_paramter ;
												`USB_command <= usb_nop           ;
												flag_counter <= 0                 ;
												fifo_parameter_en_flag <= 1       ;
											end
										else
											begin
												`USB_command <= usb_write  ;
											end
										case ( counter[0] )
											1'b0 :
												begin
													USB_Data_out_buf <= 16'h7CD2 ;
												end
											1'b1 :
												begin
													USB_Data_out_buf <= 16'h15D8 ;
												end
											default :
												begin
													USB_Data_out_buf <= 16'h0000 ;
												end
										endcase
									end
								usb_send_paramter  :
									begin
										if ( counter== 256 )
											begin
												main_state   <= current_state       ;
												next_state   <= usb_send_image_data ;
												`USB_command <= usb_nop             ;
												flag_counter <= 0                   ;
												fifo_parameter_en_flag <= 0         ;
												fifo_parameter_en      <= 0         ;
											end
										else
											begin
												USB_Data_out_buf <= parameter_data  ;
												`USB_command     <= usb_write       ;
											end
									end
								usb_send_image_data  :
									begin
										if ( counter== 256 )
											begin
												main_state         <= current_state       ;
												next_state         <= usb_send_image_data ;
												`USB_command       <= usb_nop             ;
												flag_counter       <= 0                   ;
												fifo_image_en      <= 0                   ;
												fifo_image_en_flag <= 0                   ;
											end
										else
											begin
												USB_Data_out_buf <= image_data           ;
												`USB_command     <= usb_write            ;
											end
									end
								usb_receive_data :
									begin
										if ( USB_FlagC_EP4_EF == 0 )
											begin
												main_state      <= current_state       ;
												`USB_command    <= usb_nop             ;
												receive_data_en <= 0                   ;
											end
										else
											begin
												`USB_command     <= usb_read           ;
												 receive_data    <= USB_Data_in_buf    ;
												 receive_data_en <= 1                  ;
											end
									end
								default  :
									begin
										flag_counter            <= 0        ;
										`USB_command            <= usb_nop  ;
										main_state              <= power_up ;
										receive_data            <= 0        ;
										receive_data_en         <= 0        ;
										fifo_parameter_en_flag  <= 0        ;
										receive_data_en         <= 0        ;      
										fifo_image_en_flag      <= 0        ;
										fifo_image_en           <= 0        ;
									end
							endcase
						end

endmodule
